package "ruifeng/XMLParser/parserc"

import(
  "moonbitlang/core/immut/list"
)

// Values
fn[Token, A, B, C] lift2((A, B) -> C) -> (Parser[Token, A], Parser[Token, B]) -> Parser[Token, C]

fn[A : Show] one_of(Array[A]) -> Parser[Char, A]

fn pchar(Char) -> Parser[Char, Char]

fn pchar_such_that((Char) -> Bool) -> Parser[Char, Char]

fn[Token, A] pconst(A) -> Parser[Token, A]

let pdigit : Parser[Char, Int]

fn[Token, A] pfail() -> Parser[Token, A]

let pint : Parser[Char, Int]

let pint64 : Parser[Char, Int64]

fn pstring(String) -> Parser[Char, String]

fn[Token, Value] pvalue((Token) -> Value?) -> Parser[Token, Value]

fn[Token, A] sequence(Array[Parser[Token, A]]) -> Parser[Token, Array[A]]

// Types and methods
pub type Parser[Token, Value] (Seq[Token]) -> (Value, Seq[Token])?
fn[Token, A, B] Parser::and_then(Self[Token, A], Self[Token, B]) -> Self[Token, (A, B)]
fn[Token, A, B] Parser::apply(Self[Token, A], Self[Token, (A) -> B]) -> Self[Token, B]
fn[Token, A, B] Parser::between(Self[Token, A], Self[Token, B]) -> Self[Token, A]
fn[Token, A] Parser::from_ref(Ref[Self[Token, A]]) -> Self[Token, A]
fn[Token, Value] Parser::inner(Self[Token, Value]) -> (Seq[Token]) -> (Value, Seq[Token])?
fn[Token, A, B] Parser::map(Self[Token, A], (A) -> B) -> Self[Token, B]
fn[Token, Value] Parser::new((Seq[Token]) -> (Value, Seq[Token])?) -> Self[Token, Value]
fn[Token, A, B] Parser::omit_first(Self[Token, (A, B)]) -> Self[Token, B]
fn[Token, A, B] Parser::omit_second(Self[Token, (A, B)]) -> Self[Token, A]
fn[Token, A] Parser::optional(Self[Token, A]) -> Self[Token, A?]
fn[Token, A] Parser::or_else(Self[Token, A], Self[Token, A]) -> Self[Token, A]
fn[Token, A] Parser::or_others(Self[Token, A], ArrayView[Self[Token, A]]) -> Self[Token, A]
#deprecated
fn[Token, Value] Parser::parse(Self[Token, Value], Seq[Token]) -> (Value, Seq[Token])?
fn[Token, A] Parser::repeat(Self[Token, A]) -> Self[Token, Array[A]]
fn[Token, A] Parser::repeat_0_to_n(Self[Token, A], Int) -> Self[Token, Array[A]]
fn[Token, A, B] Parser::repeat_0_to_n_with_sep(Self[Token, A], Int, Self[Token, B]) -> Self[Token, Array[A]]
fn[Token, A] Parser::repeat_n(Self[Token, A], Int) -> Self[Token, Array[A]]
fn[Token, A, B] Parser::repeat_n_with_sep(Self[Token, A], Int, Self[Token, B]) -> Self[Token, Array[A]]
fn[Token, A, B] Parser::repeat_with_sep(Self[Token, A], Self[Token, B]) -> Self[Token, Array[A]]
fn[Token, Value] Parser::run(Self[Token, Value], Seq[Token]) -> (Value, Seq[Token])?

pub type Seq[T] ArrayView[T]
fn[T] Seq::default() -> Self[T]
fn[T] Seq::from_array(ArrayView[T]) -> Self[T]
fn[T] Seq::from_list(@list.T[T]) -> Self[T]
fn Seq::from_string(String) -> Self[Char]
fn[T] Seq::inner(Self[T]) -> ArrayView[T]
fn[T] Seq::is_empty(Self[T]) -> Bool
fn[T] Seq::length(Self[T]) -> Int
fn[T1, T2] Seq::map(Self[T1], (T1) -> T2) -> Self[T2]
fn[T] Seq::new(ArrayView[T]) -> Self[T]
fn Seq::peek_char(Self[Char], Int) -> String?
fn[T] Seq::to_array(Self[T]) -> Array[T]
fn[T] Seq::to_iter(Self[T]) -> Iter[T]
fn[T] Seq::uncons(Self[T]) -> (T, Self[T])?
impl[T : Show] Show for Seq[T]

// Type aliases

// Traits

