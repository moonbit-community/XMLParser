package ruifeng/XMLParser

alias @illusory0x0/parserc as @parserc

// Values
fn pEntityRef() -> @parserc.Parser[Char, String]

fn pEntityRef_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pattribute() -> @parserc.Parser[Char, (String, String)]

fn pattribute_with_ctx() -> @parserc.Parser[Char, ((String, String), XMLParserContext)]

fn pattributes() -> @parserc.Parser[Char, Map[String, String]]

fn pattributes_with_ctx() -> @parserc.Parser[Char, (Map[String, String], XMLParserContext)]

fn pcdata() -> @parserc.Parser[Char, String]

fn pcdata_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pcharRef() -> @parserc.Parser[Char, String]

fn pcharRef_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pcomment() -> @parserc.Parser[Char, String]

fn pcomment_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pdtd() -> @parserc.Parser[Char, DocTypeDecl]

fn pdtd_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pelement() -> @parserc.Parser[Char, XMLElement]

fn pelement_with_ctx() -> @parserc.Parser[Char, (XMLElement, XMLParserContext)]

fn pname() -> @parserc.Parser[Char, String]

fn pname_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn ppi() -> @parserc.Parser[Char, String]

fn ppiTarget() -> @parserc.Parser[Char, String]

fn ppi_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pprolog() -> @parserc.Parser[Char, Map[String, String]]

fn pprolog_with_ctx() -> @parserc.Parser[Char, (Map[String, String], XMLParserContext)]

fn preference() -> @parserc.Parser[Char, String]

fn preference_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn ptext() -> @parserc.Parser[Char, String]

fn ptext_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pwhite_space() -> @parserc.Parser[Char, String]

fn pwhite_space_with_ctx() -> @parserc.Parser[Char, (String, XMLParserContext)]

fn pxml() -> @parserc.Parser[Char, XMLDocument]

fn pxml_with_ctx() -> @parserc.Parser[Char, (XMLDocument, XMLParserContext)]

fn xml_from_iter(Iter[Char]) -> XMLDocument?

fn xml_from_string(String) -> XMLDocument?

// Types and methods
pub(all) struct AttDef {
  name : String
  att_type : AttType
  default_decl : DefaultDecl
}
impl Show for AttDef

pub(all) enum AttType {
  StringType(String)
  TokenizedType(String)
  NotationType(Array[String])
  Enumeration(Array[String])
}
impl Show for AttType

pub(all) struct AttlistDecl {
  name : String
  att_defs : Array[AttDef]
}
impl Show for AttlistDecl

pub(all) enum ChildrenContentSpecOp {
  Optional
  ZeroOrMore
  OneOrMore
}
impl Show for ChildrenContentSpecOp

pub(all) type ContentParticle (SingleContentParticle, ChildrenContentSpecOp?)
impl Show for ContentParticle

pub(all) enum ContentSpec {
  EMPTY
  ANY
  Mixed(Array[String])
  Children(ContentParticle)
}
impl Show for ContentSpec

pub(all) enum DTDStatement {
  Decl(MarkUpDecl)
  Sep(String)
}
impl Show for DTDStatement

pub(all) enum DefaultDecl {
  Required
  Implied
  Fixed(String)
  Value(String)
}
impl Show for DefaultDecl

pub(all) struct DocTypeDecl {
  name : String
  externalID : ExternalID?
  intSubset : Array[DTDStatement]?
}
impl Show for DocTypeDecl

pub(all) struct ElementDecl {
  name : String
  content_spec : ContentSpec
}
impl Show for ElementDecl

pub(all) enum EntityDecl {
  GEDecl(String, EntityDef)
  PEDecl(String, EntityDef)
}
impl Show for EntityDecl

pub(all) enum EntityDef {
  EntityValue(String)
  GExternalID(ExternalID, String?)
  PExternalID(ExternalID)
}
impl Show for EntityDef

pub(all) enum ExternalID {
  System(String)
  Public(String, String)
}
impl Show for ExternalID

pub(all) struct Location {
  index : Int
  line : Int
  column : Int
  length : Int
}
impl Show for Location

pub(all) enum MarkUpDecl {
  ElementDecl(ElementDecl)
  AttListDecl(AttlistDecl)
  EntityDecl(EntityDecl)
  NotationDecl(NotationDecl)
  PI(String)
  Comment(String)
}
impl Show for MarkUpDecl

pub(all) enum Misc {
  Comment(String)
  PI(String)
  WhiteSpace(String)
}

pub(all) struct NotationDecl {
  name : String
  id : NotationDeclID
}
impl Show for NotationDecl

pub(all) enum NotationDeclID {
  PublicID(String)
  ExternalID(ExternalID)
}
impl Show for NotationDeclID

pub(all) enum SingleContentParticle {
  Name(String)
  Seq(Array[ContentParticle])
  Choice(Array[ContentParticle])
}
impl Show for SingleContentParticle

pub(all) enum XMLChildren {
  Element(XMLElement)
  Reference(String)
  CDATA(String)
  PI(String)
  Comment(String)
  Text(String)
  WhiteSpace(String)
}
impl Show for XMLChildren

pub(all) struct XMLDocument {
  version : String
  encoding : String
  standalone : Bool
  dtd : DocTypeDecl?
  root : XMLElement
}
impl Show for XMLDocument

pub(all) struct XMLElement {
  name : String
  empty_element : Bool
  attributes : Map[String, String]
  children : Array[XMLChildren]
}
impl Show for XMLElement

pub(all) enum XMLErrorKind {
  SyntaxError
  ValidationError
  EncodingError
  MalformedReference
  MismatchedTags(String, String)
  InternalParserError
}
impl Show for XMLErrorKind

pub(all) struct XMLParseError {
  kind : XMLErrorKind
  message : String
  location : Location
}
impl Show for XMLParseError

type XMLParserContext
impl Show for XMLParserContext

// Type aliases
pub typealias ChildrenContentSpec = ContentParticle

// Traits

